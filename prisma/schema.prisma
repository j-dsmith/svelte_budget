// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Budget {
  id            String        @id @default(uuid())
  name          String        @unique
  startDate     DateTime
  endDate       DateTime
  categories    Category[]
  transactions  Transaction[]
  incomes       Income[]
  totalIncome   Float
  totalExpenses Float
  totalSavings  Float
  User          User?         @relation(fields: [userId], references: [id])
  userId        String?
  Expense       Expense[]
}

enum CategoryType {
  INCOME
  EXPENSE
}

model Category {
  id           String        @id @default(uuid())
  name         String
  budget       Budget        @relation(fields: [budgetId], references: [id])
  budgetId     String
  type         CategoryType
  transactions Transaction[]
  incomes      Income[]
  expenses     Expense[]
}

model Transaction {
  id          String   @id @default(uuid())
  name        String
  amount      Float
  category    Category @relation(fields: [categoryId], references: [id])
  categoryId  String
  budget      Budget   @relation(fields: [budgetId], references: [id])
  budgetId    String
  date        DateTime
  description String?
}

model Income {
  id          String   @id @default(uuid())
  name        String
  amount      Float
  budget      Budget   @relation(fields: [budgetId], references: [id])
  budgetId    String
  category    Category @relation(fields: [categoryId], references: [id])
  categoryId  String
  date        DateTime
  description String?
}

model Expense {
  id          String   @id @default(uuid())
  name        String
  amount      Float
  budget      Budget   @relation(fields: [budgetId], references: [id])
  budgetId    String
  category    Category @relation(fields: [categoryId], references: [id])
  categoryId  String
  date        DateTime
  description String?
}

model User {
  id               String    @id @default(uuid())
  username         String    @unique
  usernameVerified DateTime?
  password         String
  budgets          Budget[]
  accounts         Account[]
  sessions         Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
